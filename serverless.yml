service: medical-appointments-challenge

plugins:
  - serverless-auto-swagger

custom:
  autoswagger:
    title: "Medical Appointments API"
    apiType: "http"
    generateSwaggerOnDeploy: true
    typefiles: ['./src/utils/api-types.d.ts']
    swaggerFiles: ['./src/utils/definitions.json']
    basePath: "/dev"
    swaggerPath: "docs"
    apiKeyHeaders: []

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    APPOINTMENT_TABLE_NAME: ${sls:stage}-appointments
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource:
        - Fn::GetAtt: [AppointmentTable, Arn]
        - Fn::Join: ['/', [Fn::GetAtt: [AppointmentTable, Arn], 'index/insuredId-index']]

    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - Ref: AppointmentTopic

    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource:
        - Fn::GetAtt: [AppointmentQueuePE, Arn]
        - Fn::GetAtt: [AppointmentQueueCL, Arn]
        - Fn::GetAtt: [AppointmentCompletionQueue, Arn]

    - Effect: Allow
      Action:
        - events:PutEvents
      Resource:
        - Fn::GetAtt: [AppointmentEventBus, Arn]

build:
  esbuild:
    bundle: true
    minify: true
    sourcemap:
      type: linked
      setNodeOptions: true
    external:
      - aws-sdk
      - serverless-auto-swagger
    packages: external

resources:
  Resources:
    AppointmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-appointments
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: insuredId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: insuredId-index
            KeySchema:
              - AttributeName: insuredId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    AppointmentTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${sls:stage}-appointments

    AppointmentQueuePE:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${sls:stage}-appointments-queue-pe
    
    AppointmentQueuePEPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: AppointmentQueuePE
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource:
                Fn::GetAtt: [AppointmentQueuePE, Arn]
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: AppointmentTopic

    AppointmentQueueCL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${sls:stage}-appointments-queue-cl

    AppointmentQueueCLPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: AppointmentQueueCL
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource:
                Fn::GetAtt: [AppointmentQueueCL, Arn]
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: AppointmentTopic

    AppointmentQueuePESubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: AppointmentTopic
        Protocol: sqs
        Endpoint:
          Fn::GetAtt: [AppointmentQueuePE, Arn]
        FilterPolicy:
          countryISO: ["PE"]

    AppointmentQueueCLSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: AppointmentTopic
        Protocol: sqs
        Endpoint:
          Fn::GetAtt: [AppointmentQueueCL, Arn]
        FilterPolicy:
          countryISO: ["CL"]

    AppointmentCompletionQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${sls:stage}-appointments-completion-queue

    EventBridgeToSQSRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: EventBridgeToSQSPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: sqs:SendMessage
                  Resource: 
                    Fn::GetAtt: [AppointmentCompletionQueue, Arn]

    AppointmentEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${sls:stage}-appointments-events

    AppointmentCompletionRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName:
          Ref: AppointmentEventBus
        EventPattern:
          detail-type: ["APPOINTMENT_PROCESSED"]
        Targets:
          - Arn:
              Fn::GetAtt: [AppointmentCompletionQueue, Arn]
            Id: "AppointmentCompletionQueue"
            RoleArn:
              Fn::GetAtt: [EventBridgeToSQSRole, Arn]

functions:
  appointment:
    handler: src/infrastructure/lambdas/appointment.handler
    events:
      - http:
          path: appointment
          method: post
          cors: true
          summary: "Create a new appointment"
          description: "Creates a new appointment with the provided data"
          bodyType: AppointmentCreateInput
          responses:
            "201":
              description: "Appointment created successfully"
              bodyType: AppointmentCreateOutput
            "400":
              description: "Validation Error"
              bodyType: Error
            "500":
              description: "Internal Server Error"
              bodyType: Error
      - http:
          path: appointment
          method: get
          cors: true
          summary: "Get appointments by insured ID"
          description: "Retrieves all appointments for a given insured ID"
          queryStringParameters:
            insuredId:
              type: string
              required: true
          responses:
            "200":
              description: "Appointment retrieved successfully"
              bodyType: AppointmentGetOutput
            "400":
              description: "Validation Error"
              bodyType: Error
            "500":
              description: "Internal Server Error"
              bodyType: Error
      - sqs:
          arn:
            Fn::GetAtt: [AppointmentCompletionQueue, Arn]
          batchSize: 1
    environment:
      DYNAMODB_TABLE_NAME: ${sls:stage}-appointments
      SNS_TOPIC_ARN:
        Ref: AppointmentTopic

  appointment_pe:
    handler: src/infrastructure/lambdas/appointment_pe.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [AppointmentQueuePE, Arn]
          batchSize: 1
    environment:
      DYNAMODB_TABLE_NAME: ${sls:stage}-appointments
      EVENTBRIDGE_BUS_NAME:
        Ref: AppointmentEventBus
      RDS_HOST_PE: ${env:RDS_HOST_PE}
      RDS_USER_PE: ${env:RDS_USER_PE}
      RDS_PASSWORD_PE: ${env:RDS_PASSWORD_PE}
      RDS_DATABASE_PE: ${env:RDS_DATABASE_PE}
      RDS_PORT_PE: ${env:RDS_PORT_PE, '5432'}
      RDS_SSL_PE: ${env:RDS_SSL_PE, 'false'}

  appointment_cl:
    handler: src/infrastructure/lambdas/appointment_cl.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [AppointmentQueueCL, Arn]
          batchSize: 1
    environment:
      DYNAMODB_TABLE_NAME: ${sls:stage}-appointments
      EVENTBRIDGE_BUS_NAME:
        Ref: AppointmentEventBus
      RDS_HOST_CL: ${env:RDS_HOST_CL}
      RDS_USER_CL: ${env:RDS_USER_CL}
      RDS_PASSWORD_CL: ${env:RDS_PASSWORD_CL}
      RDS_DATABASE_CL: ${env:RDS_DATABASE_CL}
      RDS_PORT_CL: ${env:RDS_PORT_CL, '5432'}
      RDS_SSL_CL: ${env:RDS_SSL_CL, 'false'}
